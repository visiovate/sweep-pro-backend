{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "Sweep Pro - Razorpay Integration Tests",
		"description": "Complete test suite for Razorpay payment integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "1. Setup & Authentication",
			"item": [
				{
					"name": "Setup Test Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/test/setup-test-data",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"test",
								"setup-test-data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('customer_id', response.user.id);",
									"    console.log('Customer logged in successfully');",
									"} else {",
									"    console.log('Login failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"customer@sweepro.com\",\n  \"password\": \"customer123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('admin_token', response.token);",
									"    console.log('Admin logged in successfully');",
									"} else {",
									"    console.log('Admin login failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@sweepro.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Create Test Booking",
			"item": [
				{
					"name": "Get Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.length > 0) {",
									"        pm.environment.set('service_id', response[0].id);",
									"        pm.environment.set('service_price', response[0].basePrice);",
									"        console.log('Service ID set:', response[0].id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/services",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"services"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Test Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('booking_id', response.data.booking.id);",
									"    pm.environment.set('booking_amount', response.data.booking.finalAmount);",
									"    console.log('Booking created:', response.data.booking.id);",
									"} else {",
									"    console.log('Booking creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"serviceId\": \"{{service_id}}\",\n  \"scheduledDate\": \"2025-07-15\",\n  \"scheduledTime\": \"10:00\",\n  \"address\": \"123 Test Street, Test City, Test State\",\n  \"notes\": \"Test booking for Razorpay payment integration\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/bookings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bookings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Razorpay Payment Flow",
			"item": [
				{
					"name": "Create Razorpay Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('razorpay_order_id', response.order.id);",
									"    pm.environment.set('razorpay_amount', response.order.amount);",
									"    pm.environment.set('razorpay_key', response.key);",
									"    console.log('Razorpay order created:', response.order.id);",
									"} else {",
									"    console.log('Order creation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookingId\": \"{{booking_id}}\",\n  \"amount\": {{booking_amount}},\n  \"currency\": \"INR\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/razorpay/booking/create-order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payments",
								"razorpay",
								"booking",
								"create-order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Test Signature",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('test_signature', response.signature);",
									"    pm.environment.set('test_payment_id', response.paymentId);",
									"    console.log('Test signature generated');",
									"} else {",
									"    console.log('Signature generation failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"{{razorpay_order_id}}\",\n  \"paymentId\": \"pay_test_{{$randomAlphaNumeric}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/test/generate-signature",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"test",
								"generate-signature"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Payment Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('payment_id', response.payment.id);",
									"    console.log('Payment verified successfully');",
									"} else {",
									"    console.log('Payment verification failed:', pm.response.json());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"razorpay_order_id\": \"{{razorpay_order_id}}\",\n  \"razorpay_payment_id\": \"{{test_payment_id}}\",\n  \"razorpay_signature\": \"{{test_signature}}\",\n  \"payment_method\": \"card\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/razorpay/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payments",
								"razorpay",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Simulate Payment Failure",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"razorpay_order_id\": \"{{razorpay_order_id}}\",\n  \"error_code\": \"PAYMENT_FAILED\",\n  \"error_description\": \"Payment was declined by the bank\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/razorpay/failure",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payments",
								"razorpay",
								"failure"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Admin Operations",
			"item": [
				{
					"name": "Get All Payments",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Process Refund",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refundAmount\": 100,\n  \"refundReason\": \"Customer requested refund for testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/{{payment_id}}/refund",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payments",
								"{{payment_id}}",
								"refund"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Subscription Testing",
			"item": [
				{
					"name": "Get Service Plans",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/subscriptions/plans",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"subscriptions",
								"plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Subscription Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('subscription_order_id', response.order.id);",
									"    console.log('Subscription order created:', response.order.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"subscriptionId\": \"{{subscription_id}}\",\n  \"amount\": 1500,\n  \"currency\": \"INR\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/payments/razorpay/subscription/create-order",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"payments",
								"razorpay",
								"subscription",
								"create-order"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "service_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "booking_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "booking_amount",
			"value": "",
			"type": "string"
		},
		{
			"key": "razorpay_order_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_signature",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_payment_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "payment_id",
			"value": "",
			"type": "string"
		}
	]
}
