{
  "info": {
    "name": "Sweep Pro - Notification System Testing",
    "description": "Comprehensive collection for testing the real-time notification system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bookingId",
      "value": "",
      "type": "string"
    },
    {
      "key": "paymentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "serviceId",
      "value": "",
      "type": "string"
    },
    {
      "key": "maidId",
      "value": "",
      "type": "string"
    },
    {
      "key": "customerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Setup & Authentication",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('adminId', response.user.id);",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Admin\",\n  \"email\": \"testadmin@sweepro.com\",\n  \"password\": \"admin123\",\n  \"phone\": \"9876543210\",\n  \"address\": \"Admin Office\",\n  \"role\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('adminId', response.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@sweepro.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Register Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('customerId', response.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Customer\",\n  \"email\": \"testcustomer@sweepro.com\",\n  \"password\": \"customer123\",\n  \"phone\": \"9123456789\",\n  \"address\": \"123 Test Street, Test City\",\n  \"role\": \"CUSTOMER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register Maid",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('maidId', response.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Maid\",\n  \"email\": \"testmaid@sweepro.com\",\n  \"password\": \"maid123\",\n  \"phone\": \"9123456788\",\n  \"address\": \"456 Service Lane, Worker Area\",\n  \"role\": \"MAID\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Get Test Service",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.length > 0) {",
                  "        pm.collectionVariables.set('serviceId', response[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/services",
              "host": ["{{baseUrl}}"],
              "path": ["api", "services"]
            }
          }
        }
      ]
    },
    {
      "name": "Notification Management",
      "item": [
        {
          "name": "Get Notification Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "types"]
            }
          }
        },
        {
          "name": "Get User Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Unread Notifications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/unread",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "unread"]
            }
          }
        },
        {
          "name": "Get Notification Statistics (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/stats?timeframe=24h",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "stats"],
              "query": [
                {
                  "key": "timeframe",
                  "value": "24h"
                }
              ]
            }
          }
        },
        {
          "name": "WebSocket Health Check (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "Test Notifications",
      "item": [
        {
          "name": "Send Test Notification (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{customerId}}\",\n  \"type\": \"SYSTEM_ALERT\",\n  \"title\": \"Test Notification\",\n  \"message\": \"This is a test notification sent from Postman\",\n  \"data\": {\n    \"priority\": \"HIGH\",\n    \"source\": \"admin_panel\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications/test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "test"]
            }
          }
        },
        {
          "name": "Send Broadcast Notification (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"SYSTEM_ALERT\",\n  \"title\": \"System Announcement\",\n  \"message\": \"This is a broadcast message to all users\",\n  \"data\": {\n    \"priority\": \"MEDIUM\",\n    \"category\": \"announcement\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications/broadcast",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "broadcast"]
            }
          }
        },
        {
          "name": "Send Maintenance Notification (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"startTime\": \"2025-07-16T02:00:00Z\",\n  \"endTime\": \"2025-07-16T04:00:00Z\",\n  \"description\": \"Scheduled maintenance for system updates\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications/maintenance",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "maintenance"]
            }
          }
        },
        {
          "name": "Send Emergency Alert (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"alertType\": \"SYSTEM_OUTAGE\",\n  \"message\": \"Emergency: System experiencing temporary issues\",\n  \"priority\": \"CRITICAL\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications/emergency",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "emergency"]
            }
          }
        }
      ]
    },
    {
      "name": "Booking Notifications",
      "item": [
        {
          "name": "Create Booking (Triggers Notification)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('bookingId', response.data.booking.id);",
                  "    if (response.data.payment) {",
                  "        pm.collectionVariables.set('paymentId', response.data.payment.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serviceId\": \"{{serviceId}}\",\n  \"scheduledDate\": \"2025-07-16\",\n  \"scheduledTime\": \"10:00\",\n  \"address\": \"123 Test Street, Test City\",\n  \"notes\": \"Test booking for notification testing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings"]
            }
          }
        },
        {
          "name": "Assign Maid to Booking (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"maidId\": \"{{maidId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}/assign",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}", "assign"]
            }
          }
        },
        {
          "name": "Update Booking Status - In Progress (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"IN_PROGRESS\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}", "status"]
            }
          }
        },
        {
          "name": "Update Booking Status - Completed (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"COMPLETED\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}", "status"]
            }
          }
        },
        {
          "name": "Cancel Booking (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"Customer requested cancellation\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/bookings/{{bookingId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "bookings", "{{bookingId}}", "cancel"]
            }
          }
        }
      ]
    },
    {
      "name": "Payment Notifications",
      "item": [
        {
          "name": "Create Payment (Triggers Notification)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('paymentId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"bookingId\": \"{{bookingId}}\",\n  \"amount\": 500,\n  \"paymentMethod\": \"CARD\",\n  \"gateway\": \"razorpay\",\n  \"transactionId\": \"test_txn_12345\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payments"]
            }
          }
        },
        {
          "name": "Update Payment Status - Completed (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"COMPLETED\",\n  \"transactionId\": \"test_txn_completed_12345\",\n  \"gateway\": \"razorpay\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payments/{{paymentId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payments", "{{paymentId}}", "status"]
            }
          }
        },
        {
          "name": "Update Payment Status - Failed (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"FAILED\",\n  \"transactionId\": \"test_txn_failed_12345\",\n  \"gateway\": \"razorpay\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payments/{{paymentId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payments", "{{paymentId}}", "status"]
            }
          }
        },
        {
          "name": "Update Payment Status - Refunded (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"REFUNDED\",\n  \"refundAmount\": 250,\n  \"refundReason\": \"Customer requested refund\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payments/{{paymentId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payments", "{{paymentId}}", "status"]
            }
          }
        }
      ]
    },
    {
      "name": "User Profile Notifications",
      "item": [
        {
          "name": "Login as Customer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('customerId', response.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"customer@sweepro.com\",\n  \"password\": \"customer123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Update Profile (Triggers Notification)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Customer Updated\",\n  \"phone\": \"9123456780\",\n  \"address\": \"123 Updated Street, New City\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "profile"]
            }
          }
        }
      ]
    },
    {
      "name": "Notification Actions",
      "item": [
        {
          "name": "Mark All Notifications as Read",
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications/read-all",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications", "read-all"]
            }
          }
        },
        {
          "name": "Get User Notifications After Actions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/notifications?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "WebSocket Test Guide",
      "item": [
        {
          "name": "WebSocket Connection Instructions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "WebSocket Testing Instructions:\n\n1. Use a WebSocket client (like wscat or browser console)\n2. Connect to: ws://localhost:3000\n3. Send authentication message:\n   {\"type\": \"auth\", \"token\": \"your-jwt-token\"}\n4. Listen for notifications while running Postman tests\n5. Send ping to test connection:\n   {\"type\": \"ping\"}\n\nExample WebSocket client code:\n```javascript\nconst ws = new WebSocket('ws://localhost:3000');\nws.onopen = () => {\n  ws.send(JSON.stringify({\n    type: 'auth',\n    token: 'your-jwt-token'\n  }));\n};\nws.onmessage = (event) => {\n  console.log('Received:', JSON.parse(event.data));\n};\n```"
          }
        }
      ]
    }
  ]
}
